{
  "session_id": "096b9c55-d8c1-48d6-8b36-f3623cc4de98",
  "transcript_path": "/Users/hue/.claude/projects/-Users-hue-code-Dopemux-ChatRipperXXX/096b9c55-d8c1-48d6-8b36-f3623cc4de98.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "tests/image_enrich/test_image_enrichment.py",
    "content": "\"\"\"Tests for image enrichment pipeline.\"\"\"\n\nimport pytest\nfrom pathlib import Path\nfrom unittest.mock import AsyncMock, MagicMock\n\nfrom chatx.enrichment.image_enricher import (\n    ImageEnrichmentRequest,\n    ImageEnrichment,\n    ImageEnricher,\n    ImageEnrichmentMetrics\n)\n\n\nclass TestImageEnrichmentRequest:\n    \"\"\"Test ImageEnrichmentRequest class.\"\"\"\n\n    def test_basic_initialization(self):\n        \"\"\"Test basic request initialization.\"\"\"\n        request = ImageEnrichmentRequest(\n            msg_id=\"m1\",\n            attachment_index=0,\n            provenance={\"source\": \"local\"}\n        )\n\n        assert request.msg_id == \"m1\"\n        assert request.attachment_index == 0\n        assert request.provenance == {\"source\": \"local\"}\n        assert request.hash_sha256 == \"\"  # No image data\n\n    def test_hash_with_path(self, tmp_path):\n        \"\"\"Test SHA256 hash computation with file path.\"\"\"\n        # Create a test file\n        test_file = tmp_path / \"test.jpg\"\n        test_file.write_bytes(b\"test image data\")\n\n        request = ImageEnrichmentRequest(\n            msg_id=\"m1\",\n            attachment_index=0,\n            image_path=test_file\n        )\n\n        # Should compute hash when accessing property\n        import hashlib\n        expected_hash = hashlib.sha256(b\"test image data\").hexdigest()\n        assert request.hash_sha256 == expected_hash\n\n    def test_hash_with_data(self):\n        \"\"\"Test SHA256 hash computation with raw data.\"\"\"\n        test_data = b\"test image data\"\n\n        request = ImageEnrichmentRequest(\n            msg_id=\"m1\",\n            attachment_index=0,\n            image_data=test_data\n        )\n\n        import hashlib\n        expected_hash = hashlib.sha256(test_data).hexdigest()\n        assert request.hash_sha256 == expected_hash\n\n\nclass TestImageEnrichment:\n    \"\"\"Test ImageEnrichment class.\"\"\"\n\n    def test_basic_enrichment(self):\n        \"\"\"Test basic enrichment creation and serialization.\"\"\"\n        enrichment = ImageEnrichment(\n            msg_id=\"m1\",\n            attachment_index=0,\n            hash_sha256=\"dummy_hash\",\n            provenance={\"source\": \"local\"},\n            ocr_text=\"Hello World\",\n            objects=[{\"label\": \"person\", \"conf\": 0.8}],\n            category=\"photo\",\n            caption={\"short\": \"A test image\"},\n            tags=[\"test\", \"image\"],\n            faces={\"count\": 1, \"blurred\": False},\n            nsfw_risk=0.1,\n            psych={\"emotion_hint\": \"happy\"}\n        )\n\n        result = enrichment.dict()\n\n        # Check required fields\n        assert result[\"msg_id\"] == \"m1\"\n        assert result[\"attachment_index\"] == 0\n        assert result[\"hash_sha256\"] == \"dummy_hash\"\n        assert result[\"provenance\"] == {\"source\": \"local\"}\n\n        # Check optional fields\n        assert result[\"ocr\"][\"text\"] == \"Hello World\"\n        assert result[\"objects\"] == [{\"label\": \"person\", \"conf\": 0.8}]\n        assert result[\"category\"] == \"photo\"\n        assert result[\"caption\"][\"short\"] == \"A test image\"\n        assert result[\"tags\"] == [\"test\", \"image\"]\n        assert result[\"faces\"][\"count\"] == 1\n        assert result[\"nsfw_risk\"] == 0.1\n        assert result[\"psych\"][\"emotion_hint\"] == \"happy\"\n\n    def test_minimal_enrichment(self):\n        \"\"\"Test enrichment with minimal required fields.\"\"\"\n        enrichment = ImageEnrichment(\n            msg_id=\"m1\",\n            attachment_index=0,\n            hash_sha256=\"dummy_hash\",\n            provenance={\"source\": \"local\"}\n        )\n\n        result = enrichment.dict()\n\n        # Only required fields should be present\n        assert \"ocr\" not in result\n        assert \"objects\" not in result\n        assert \"category\" not in result\n        assert result[\"msg_id\"] == \"m1\"\n\n\n@pytest.mark.asyncio\nclass TestImageEnricher:\n    \"\"\"Test ImageEnricher class.\"\"\"\n\n    async def test_basic_enrichment_flow(self):\n        \"\"\"Test basic enrichment flow with placeholder data.\"\"\"\n        enricher = ImageEnricher(\n            ocr_enabled=True,\n            object_detection_enabled=True,\n            vlm_enabled=True,\n            validate_schemas=False  # Skip validation for test\n        )\n\n        # Mock image data (we'll use bytes since PIL isn't easily mocked)\n        import io\n        from PIL import Image\n\n        # Create a minimal test image\n        test_image = Image.new('RGB', (10, 10), color='red')\n        img_bytes = io.BytesIO()\n        test_image.save(img_bytes, format='PNG')\n        img_bytes.seek(0)\n\n        request = ImageEnrichmentRequest(\n            msg_id=\"m1\",\n            attachment_index=0,\n            image_data=img_bytes.getvalue(),\n            provenance={\n                \"schema_v\": \"1\",\n                \"run_id\": \"test-run\",\n                \"model_id\": \"test-model\",\n                \"prompt_hash\": \"testhash\",\n                \"source\": \"local\"\n            }\n        )\n\n        enrichment, metadata = await enricher.enrich_image(request)\n\n        assert enrichment is not None\n        assert enrichment.msg_id == \"m1\"\n        assert enrichment.attachment_index == 0\n        assert enrichment.provenance[\"source\"] == \"local\"\n\n        # Check that placeholder data was set\n        assert enrichment.objects == [{\"label\": \"person\", \"conf\": 0.85, \"box\": [0.1, 0.2, 0.3, 0.4]}]\n        assert enrichment.category == \"photo\"\n        assert enrichment.caption == {\"short\": \"A placeholder caption\"}\n        assert enrichment.tags == [\"placeholder\", \"tag\"]\n        assert enrichment.faces == {\"count\": 1, \"blurred\": False}\n        assert enrichment.nsfw_risk == 0.1\n\n        # Check psych analysis\n        assert \"psych\" in enrichment.dict()\n        assert enrichment.psych[\"emotion_hint\"] == \"neutral\"\n        assert enrichment.psych[\"coarse_labels\"] == [\"communication\"]\n\n        # Check metadata\n        assert \"processing_time_ms\" in metadata\n        assert metadata[\"run_id\"] == enricher.run_id\n        assert metadata[\"features_processed\"][\"objects\"] is True\n        assert metadata[\"features_processed\"][\"psych\"] is True\n\n    async def test_no_image_data_error(self):\n        \"\"\"Test error handling when no image data provided.\"\"\"\n        enricher = ImageEnricher(validate_schemas=False)\n\n        request = ImageEnrichmentRequest(\n            msg_id=\"m1\",\n            attachment_index=0,\n            provenance={\"source\": \"local\"}\n        )\n\n        enrichment, metadata = await enricher.enrich_image(request)\n\n        assert enrichment is None\n        assert metadata[\"error\"] == \"no_image_data\"\n\n    def test_enricher_initialization(self):\n        \"\"\"Test enricher initialization with different options.\"\"\"\n        # Test with all features enabled\n        enricher = ImageEnricher(\n            ocr_enabled=True,\n            object_detection_enabled=True,\n            vlm_enabled=True,\n            validate_schemas=True\n        )\n\n        assert enricher.ocr_enabled is True\n        assert enricher.object_detection_enabled is True\n        assert enricher.vlm_enabled is True\n        assert enricher.validate_schemas is True\n        assert enricher.run_id is not None\n\n        # Test with features disabled\n        enricher = ImageEnricher(\n            ocr_enabled=False,\n            object_detection_enabled=False,\n            vlm_enabled=False,\n            validate_schemas=False\n        )\n\n        assert enricher.ocr_enabled is False\n        assert enricher.object_detection_enabled is False\n        assert enricher.vlm_enabled is False\n        assert enricher.validate_schemas is False\n\n\nclass TestImageEnrichmentMetrics:\n    \"\"\"Test ImageEnrichmentMetrics class.\"\"\"\n\n    def test_metrics_recording(self):\n        \"\"\"Test metrics recording and summary.\"\"\"\n        metrics = ImageEnrichmentMetrics()\n\n        # Record some enrichments\n        metrics.record_enrichment(success=True, processing_time_ms=100.0)\n        metrics.record_enrichment(success=False, processing_time_ms=50.0)\n        metrics.record_enrichment(success=True, processing_time_ms=75.0)\n\n        summary = metrics.get_summary()\n\n        assert summary[\"images_processed\"] == 3\n        assert summary[\"enrichments_generated\"] == 2\n        assert summary[\"processing_errors\"] == 1\n        assert summary[\"success_rate\"] == 2.0 / 3.0\n        assert summary[\"average_latency_ms\"] == (100.0 + 50.0 + 75.0) / 3.0\n\n    def test_empty_metrics(self):\n        \"\"\"Test metrics with no data.\"\"\"\n        metrics = ImageEnrichmentMetrics()\n\n        summary = metrics.get_summary()\n\n        assert summary[\"images_processed\"] == 0\n        assert summary[\"enrichments_generated\"] == 0\n        assert summary[\"success_rate\"] == 0\n        assert summary[\"average_latency_ms\"] == 0"
  }
}