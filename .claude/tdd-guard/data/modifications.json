{
  "session_id": "31b8a973-73d3-4d6c-875d-97cd36fc02c7",
  "transcript_path": "/Users/hue/.claude/projects/-Users-hue-code-Dopemux-ChatRipperXXX/31b8a973-73d3-4d6c-875d-97cd36fc02c7.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/Users/hue/code/Dopemux-ChatRipperXXX/src/chatx/mcp/example_usage.py",
    "content": "#!/usr/bin/env python3\n\"\"\"\nExample usage of the Constrained Dynamic Loading system for MCP servers.\n\nThis script demonstrates how to:\n1. Initialize the constrained loader\n2. Register MCP servers with patterns\n3. Activate servers based on context\n4. Monitor health and resources\n5. Handle admin overrides\n\"\"\"\n\nimport asyncio\nimport logging\nfrom typing import Dict, Any\n\nfrom .loader import ConstrainedDynamicLoader, LoaderConfig\nfrom .registry import ServerRegistry, ServerConfig\nfrom .patterns import ActivationPattern\nfrom .admin import OverrideReason\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef setup_example_servers(registry: ServerRegistry) -> None:\n    \"\"\"Set up example MCP server configurations.\"\"\"\n\n    # Task Master AI Server\n    taskmaster_config = ServerConfig(\n        id=\"task-master-ai\",\n        name=\"Task Master AI\",\n        command=[\"npx\", \"-y\", \"--package=task-master-ai\", \"task-master-ai\"],\n        activation_patterns=[\n            ActivationPattern(\n                tool_patterns=[\"mcp__task-master-ai__*\"],\n                context_patterns=[\"project_management\", \"task_tracking\"],\n                priority=8\n            )\n        ],\n        priority=8,\n        approved=True,\n        estimated_tokens=6000,\n        description=\"Task management and project tracking\"\n    )\n\n    # Claude Context Search Server\n    context_config = ServerConfig(\n        id=\"claude-context\",\n        name=\"Claude Context Search\",\n        command=[\"npx\", \"claude-context-mcp\"],\n        activation_patterns=[\n            ActivationPattern(\n                tool_patterns=[\"mcp__claude-context__*\", \"mcp__claude_context__*\"],\n                context_patterns=[\"semantic_search\", \"code_search\"],\n                content_size_patterns=[(0, 50000)],  # Avoid for large codebases\n                priority=7\n            )\n        ],\n        priority=7,\n        approved=True,\n        estimated_tokens=3000,\n        description=\"Semantic code search and context analysis\"\n    )\n\n    # Register servers\n    registry.register_server(taskmaster_config)\n    registry.register_server(context_config)\n\n    logger.info(\"Example servers registered and approved\")\n\n\ndef demonstrate_pattern_matching(loader: ConstrainedDynamicLoader) -> None:\n    \"\"\"Demonstrate pattern-based server matching.\"\"\"\n\n    test_contexts = [\n        {\n            'tool': 'mcp__task-master-ai__get_tasks',\n            'input': {'status': 'pending'},\n            'content_size': 500\n        },\n        {\n            'tool': 'mcp__claude-context__search_code',\n            'input': {'query': 'find_user_function'},\n            'content_size': 1000\n        },\n        {\n            'tool': 'unknown_tool',\n            'input': {},\n            'content_size': 100\n        }\n    ]\n\n    for i, context in enumerate(test_contexts, 1):\n        logger.info(f\"\\n--- Context {i}: {context['tool']} ---\")\n\n        # Get matching servers\n        matching_servers = loader.get_matching_servers(context)\n        logger.info(f\"Matching servers: {len(matching_servers)}\")\n\n        for server in matching_servers:\n            logger.info(f\"  - {server.id}: {server.description}\")\n\n        # Get optimal server\n        optimal_server = loader.get_optimal_server(context)\n        if optimal_server:\n            logger.info(f\"Optimal server: {optimal_server.id} ({optimal_server.estimated_tokens} tokens)\")\n        else:\n            logger.info(\"No optimal server found\")\n\n\ndef demonstrate_server_activation(loader: ConstrainedDynamicLoader) -> None:\n    \"\"\"Demonstrate server activation with safety controls.\"\"\"\n\n    context = {\n        'tool': 'mcp__task-master-ai__get_tasks',\n        'input': {'status': 'pending'},\n        'content_size': 500\n    }\n\n    logger.info(\"\\n--- Server Activation Demo ---\")\n\n    # Get optimal server\n    optimal_server = loader.get_optimal_server(context)\n    if not optimal_server:\n        logger.error(\"No server available for activation\")\n        return\n\n    logger.info(f\"Activating server: {optimal_server.id}\")\n\n    # Note: In a real scenario, this would attempt to start the actual server process\n    # For demo purposes, we'll simulate the activation check\n    can_activate, reason = loader.can_activate_server(optimal_server)\n    logger.info(f\"Can activate: {can_activate} - {reason}\")\n\n    if can_activate:\n        logger.info(\"Server would be activated with 5-second timeout...\")\n        logger.info(\"Health monitoring would begin...\")\n        logger.info(\"Resource allocation would be tracked...\")\n\n\ndef demonstrate_resource_monitoring(loader: ConstrainedDynamicLoader) -> None:\n    \"\"\"Demonstrate resource monitoring capabilities.\"\"\"\n\n    logger.info(\"\\n--- Resource Monitoring Demo ---\")\n\n    # Get resource usage summary\n    summary = loader.get_statistics()\n    logger.info(\"Current resource usage:\")\n    logger.info(f\"  Active servers: {summary['active_servers']}\")\n    logger.info(f\"  Token savings: {summary['tokens_saved']}\")\n\n    # Get resource manager status\n    resource_usage = loader.resource_manager.get_usage_summary()\n    logger.info(\"Resource allocation status:\")\n    logger.info(f\"  Memory: {resource_usage['allocated_resources']['memory_mb']} MB allocated\")\n    logger.info(f\"  CPU: {resource_usage['allocated_resources']['cpu_percent']}% allocated\")\n\n\ndef demonstrate_admin_override(loader: ConstrainedDynamicLoader) -> None:\n    \"\"\"Demonstrate admin override capabilities.\"\"\"\n\n    logger.info(\"\\n--- Admin Override Demo ---\")\n\n    if not loader.admin_override:\n        logger.info(\"Admin override system not enabled\")\n        return\n\n    # Simulate resource constraint scenario\n    context = {'tool': 'mcp__emergency__fix', 'input': {}}\n\n    result = loader.admin_override.check_override(\n        \"emergency-server\",\n        context,\n        OverrideReason.RESOURCE_CONSTRAINTS\n    )\n\n    logger.info(f\"Auto-approval for resource constraints: {result.allowed}\")\n    logger.info(f\"Reason: {result.reason}\")\n\n    # Demonstrate manual override request\n    manual_result = loader.admin_override.request_manual_override(\n        server_id=\"manual-override-server\",\n        reason=OverrideReason.SECURITY_VIOLATION,\n        justification=\"Critical security patch deployment\",\n        requested_by=\"admin\",\n        duration_hours=2\n    )\n\n    logger.info(f\"Manual override approved: {manual_result.allowed}\")\n    if manual_result.allowed:\n        logger.info(f\"Expiry: {manual_result.expiry}\")\n\n\nasync def main() -> None:\n    \"\"\"Main demonstration function.\"\"\"\n\n    logger.info(\"ðŸš€ Constrained Dynamic Loading Demo\")\n    logger.info(\"=\" * 50)\n\n    # Initialize components\n    config = LoaderConfig(\n        max_concurrent_servers=3,\n        global_timeout_seconds=5,\n        fail_closed=True,\n        enable_admin_override=True\n    )\n\n    registry = ServerRegistry()\n    loader = ConstrainedDynamicLoader(config, registry)\n\n    # Setup example servers\n    setup_example_servers(registry)\n\n    # Demonstrate core functionality\n    demonstrate_pattern_matching(loader)\n    demonstrate_server_activation(loader)\n    demonstrate_resource_monitoring(loader)\n    demonstrate_admin_override(loader)\n\n    # Show final statistics\n    final_stats = loader.get_statistics()\n    logger.info(\"\\n--- Final Statistics ---\")\n    logger.info(f\"Total activations attempted: {final_stats['total_activations']}\")\n    logger.info(f\"Failed activations: {final_stats['failed_activations']}\")\n    logger.info(f\"Success rate: {final_stats['success_rate']:.2%}\")\n    logger.info(f\"Token savings: {final_stats['tokens_saved']}\")\n\n    # Cleanup\n    loader.cleanup()\n    logger.info(\"\\nâœ… Demo completed successfully\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
  }
}