{
  "session_id": "7f33f534-b138-400a-8d77-5be2a584df6b",
  "transcript_path": "/Users/hue/.claude/projects/-Users-hue-code-Dopemux-ChatRipperXXX/7f33f534-b138-400a-8d77-5be2a584df6b.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "tests/test_policy_shield_aggregation.py",
    "content": "\"\"\"Tests for PolicyShield aggregate_statistics_with_dp method.\"\"\"\n\nimport pytest\nfrom src.chatx.redaction.policy_shield import PolicyShield, PrivacyPolicy\nfrom src.chatx.redaction.patterns import StatisticalQuery\n\n\nclass TestAggregateStatisticsDP:\n    \"\"\"Test PolicyShield aggregate_statistics_with_dp method.\"\"\"\n\n    def test_aggregate_statistics_with_dp_basic(self):\n        \"\"\"Test basic aggregation functionality with multiple queries.\"\"\"\n        # Create PolicyShield with DP enabled\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=2.0, dp_delta=1e-6)\n        shield = PolicyShield(policy=policy)\n\n        # Prepare test data\n        test_data = [\n            {'age': 25, 'score': 85, 'category': 'A'},\n            {'age': 30, 'score': 90, 'category': 'B'},\n            {'age': 35, 'score': 95, 'category': 'A'},\n            {'age': 40, 'score': 80, 'category': 'A'},\n        ]\n\n        # Prepare queries\n        queries = [\n            StatisticalQuery(query_type='count', field_name='age'),\n            StatisticalQuery(query_type='sum', field_name='score'),\n            StatisticalQuery(query_type='mean', field_name='age'),\n        ]\n\n        # Execute aggregation\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        # Verify results structure\n        assert len(results) == 3\n        assert 'count_age_0' in results\n        assert 'sum_score_1' in results\n        assert 'mean_age_2' in results\n\n        # Verify each result is a DPResult with expected properties\n        for query_name, result in results.items():\n            assert hasattr(result, 'value')\n            assert hasattr(result, 'privacy_cost')\n            assert hasattr(result, 'noise_scale')\n            assert result.privacy_cost.epsilon == 2.0 / len(queries)  # Budget split\n            assert result.privacy_cost.delta == 1e-6 / len(queries)\n\n    def test_aggregate_statistics_with_dp_empty_data(self):\n        \"\"\"Test aggregation with empty data returns empty dict.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=1.0)\n        shield = PolicyShield(policy=policy)\n\n        queries = [StatisticalQuery(query_type='count', field_name='value')]\n        results = shield.aggregate_statistics_with_dp([], queries)\n\n        assert results == {}\n\n    def test_aggregate_statistics_with_dp_unsupported_query(self):\n        \"\"\"Test handling of unsupported query types.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=1.0)\n        shield = PolicyShield(policy=policy)\n\n        test_data = [{'value': 1}, {'value': 2}]\n        queries = [\n            StatisticalQuery(query_type='count', field_name='value'),\n            StatisticalQuery(query_type='unsupported', field_name='value'),\n        ]\n\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        # Should only return result for supported query\n        assert len(results) == 1\n        assert 'count_value_0' in results\n        assert 'unsupported_value_1' not in results\n\n    def test_aggregate_statistics_with_dp_disabled(self):\n        \"\"\"Test that method raises error when DP is disabled.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=False)\n        shield = PolicyShield(policy=policy)\n\n        test_data = [{'value': 1}]\n        queries = [StatisticalQuery(query_type='count', field_name='value')]\n\n        with pytest.raises(ValueError, match=\"Differential privacy is not enabled\"):\n            shield.aggregate_statistics_with_dp(test_data, queries)\n\n    def test_aggregate_statistics_with_dp_histogram(self):\n        \"\"\"Test aggregation with histogram query.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=1.0)\n        shield = PolicyShield(policy=policy)\n\n        test_data = [\n            {'rating': 1},\n            {'rating': 2},\n            {'rating': 3},\n            {'rating': 4},\n        ]\n\n        queries = [\n            StatisticalQuery(\n                query_type='histogram',\n                field_name='rating',\n                bin_config={'num_bins': 4}\n            )\n        ]\n\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        assert len(results) == 1\n        result = results['histogram_rating_0']\n        assert isinstance(result.value, list)\n        assert len(result.value) == 4  # 4 bins\n        assert all(count >= 0 for count in result.value)\n\n    def test_aggregate_statistics_with_dp_budget_splitting(self):\n        \"\"\"Test that privacy budget is correctly split across multiple queries.\"\"\"\n        total_epsilon = 2.0\n        num_queries = 3\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=total_epsilon)\n        shield = PolicyShield(policy=policy)\n\n        test_data = [{'value': i} for i in range(10)]\n        queries = [\n            StatisticalQuery(query_type='count', field_name='value'),\n            StatisticalQuery(query_type='sum', field_name='value'),\n            StatisticalQuery(query_type='mean', field_name='value'),\n        ]\n\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        expected_epsilon_per_query = total_epsilon / num_queries\n        for result in results.values():\n            assert abs(result.privacy_cost.epsilon - expected_epsilon_per_query) < 1e-10\n\n    def test_aggregate_statistics_with_dp_noise_validation(self):\n        \"\"\"Test that results include appropriate noise for privacy.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=1.0)\n        shield = PolicyShield(policy=policy, salt_file=None)  # No salt for reproducible results\n\n        test_data = [{'value': 10}] * 100  # Many identical values\n        queries = [StatisticalQuery(query_type='count', field_name='value')]\n\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        result = results['count_value_0']\n        # True count is 100, result should be close but not exactly 100 due to noise\n        assert isinstance(result.value, float)\n        assert result.value > 0  # Should be positive\n        assert abs(result.value - 100) < 20  # Should be reasonably close with noise\n        assert result.noise_scale > 0  # Should have measurable noise\n\n    def test_aggregate_statistics_with_dp_filter_conditions(self):\n        \"\"\"Test aggregation with query filter conditions.\"\"\"\n        policy = PrivacyPolicy(enable_differential_privacy=True, dp_epsilon=1.0)\n        shield = PolicyShield(policy=policy)\n\n        test_data = [\n            {'category': 'A', 'value': 10},\n            {'category': 'B', 'value': 20},\n            {'category': 'A', 'value': 30},\n        ]\n\n        queries = [\n            StatisticalQuery(\n                query_type='count',\n                field_name='value',\n                filter_conditions={'category': 'A'}\n            )\n        ]\n\n        results = shield.aggregate_statistics_with_dp(test_data, queries)\n\n        result = results['count_value_0']\n        # Should count only category 'A' records (true count = 2)\n        assert isinstance(result.value, float)\n        assert result.value >= 0\n        assert abs(result.value - 2) < 5  # Should be close to true count with noise"
  }
}