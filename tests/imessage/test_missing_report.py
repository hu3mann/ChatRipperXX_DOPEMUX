"""Tests for missing attachment reporting CLI integration."""

import json
import sqlite3
from pathlib import Path

import pytest

from chatx.imessage.extract import extract_messages


class TestMissingReportCLIIntegration:
    """Test missing attachment reporting integration with CLI."""
    
    @pytest.fixture
    def test_db(self, tmp_path):
        """Create test database from fixture SQL."""
        db_path = tmp_path / "chat.db"
        
        # Read and execute the fixture SQL
        fixture_sql = Path(__file__).parent.parent / "fixtures" / "imessage_test_data.sql"
        
        conn = sqlite3.connect(db_path)
        with open(fixture_sql, 'r') as f:
            conn.executescript(f.read())
        conn.close()
        
        return db_path
    
    def test_missing_report_integration_with_extraction(self, test_db, tmp_path):
        """Test that missing attachments are detected during extraction."""
        from chatx.imessage.report import scan_for_missing_attachments
        from chatx.imessage.db import copy_db_for_readonly, open_ro
        
        # Test the scanning function directly
        with copy_db_for_readonly(test_db) as temp_db:
            conn = open_ro(temp_db)
            try:
                missing_items = scan_for_missing_attachments(conn, "+15551234567")
                
                # Should find missing attachments (since files don't exist in test env)
                assert len(missing_items) > 0
                
                # Check structure of missing items
                for item in missing_items:
                    assert item.conv_guid
                    assert item.msg_id
                    assert item.filename
                    assert item.conv_guid == "iMessage;-;+15551234567"
                
            finally:
                conn.close()
    
    def test_missing_report_not_generated_when_disabled(self, test_db, tmp_path):
        """Test that missing report is not generated when disabled."""
        out_dir = tmp_path / "output"
        out_dir.mkdir()
        
        # Extract messages without missing report
        messages = list(extract_messages(
            db_path=test_db,
            contact="+15551234567",
            out_dir=out_dir,
            include_attachments=True
        ))
        
        # Should have extracted messages
        assert len(messages) > 0
        
        # Missing report should not be generated by extract_messages
        # (it's only generated by CLI when --report-missing is used)
        missing_report = out_dir / "missing_attachments_report.json"
        assert not missing_report.exists()
    
    def test_missing_report_json_schema_compliance(self, test_db, tmp_path):
        """Test that generated reports comply with JSON schema."""
        from chatx.imessage.report import generate_missing_attachments_report
        from chatx.imessage.db import copy_db_for_readonly, open_ro
        
        out_dir = tmp_path / "output"
        
        with copy_db_for_readonly(test_db) as temp_db:
            conn = open_ro(temp_db)
            try:
                # Generate report
                missing_counts = generate_missing_attachments_report(conn, out_dir, "+15551234567")
                
                # Report should be created
                report_path = out_dir / "missing_attachments_report.json"
                assert report_path.exists()
                
                # Load and verify JSON structure
                with open(report_path) as f:
                    report_data = json.load(f)
                
                # Required top-level fields
                assert "generated_at" in report_data
                assert "contact" in report_data
                assert "items" in report_data
                assert "summary" in report_data
                assert "remediation_guidance" in report_data
                
                # Summary structure
                summary = report_data["summary"]
                assert "total_missing" in summary
                assert "per_conversation" in summary
                assert isinstance(summary["total_missing"], int)
                assert isinstance(summary["per_conversation"], dict)
                
                # Items structure
                for item in report_data["items"]:
                    assert "conv_guid" in item
                    assert "msg_id" in item
                    assert "filename" in item
                
                # Remediation guidance structure
                guidance = report_data["remediation_guidance"]
                assert "manual_steps" in guidance
                assert isinstance(guidance["manual_steps"], list)
                assert len(guidance["manual_steps"]) > 0
                
            finally:
                conn.close()
    
    def test_missing_report_with_different_contacts(self, tmp_path):
        """Test missing report generation for different contact patterns."""
        from chatx.imessage.report import generate_missing_attachments_report
        
        # Create test database with multiple contacts
        db_path = tmp_path / "chat.db"
        
        conn = sqlite3.connect(db_path)
        
        # Create schema and test data
        conn.execute("CREATE TABLE handle (ROWID INTEGER PRIMARY KEY, id TEXT)")
        conn.execute("INSERT INTO handle VALUES (1, '+15551111111'), (2, '+15552222222')")
        
        conn.execute("CREATE TABLE chat (ROWID INTEGER PRIMARY KEY, guid TEXT)")
        conn.execute("INSERT INTO chat VALUES (1, 'iMessage;-;+15551111111'), (2, 'iMessage;-;+15552222222')")
        
        conn.execute("""
            CREATE TABLE message (
                ROWID INTEGER PRIMARY KEY, guid TEXT, text TEXT, is_from_me INTEGER,
                handle_id INTEGER, date INTEGER
            )
        """)
        conn.execute("INSERT INTO message VALUES (1, 'msg1', 'text1', 0, 1, 1000), (2, 'msg2', 'text2', 0, 2, 2000)")
        
        conn.execute("""
            CREATE TABLE attachment (
                ROWID INTEGER PRIMARY KEY, filename TEXT, uti TEXT, mime_type TEXT,
                transfer_name TEXT, total_bytes INTEGER, created_date INTEGER, start_date INTEGER, user_info BLOB
            )
        """)
        conn.execute("INSERT INTO attachment (ROWID, filename, uti, mime_type) VALUES (1, 'file1.jpg', 'public.jpeg', 'image/jpeg'), (2, 'file2.pdf', 'com.adobe.pdf', 'application/pdf')")
        
        conn.execute("CREATE TABLE message_attachment_join (message_id INTEGER, attachment_id INTEGER)")
        conn.execute("INSERT INTO message_attachment_join VALUES (1, 1), (2, 2)")
        
        conn.execute("CREATE TABLE chat_message_join (chat_id INTEGER, message_id INTEGER)")
        conn.execute("INSERT INTO chat_message_join VALUES (1, 1), (2, 2)")
        
        conn.commit()
        
        out_dir = tmp_path / "output"
        
        # Test with specific contact
        missing_counts = generate_missing_attachments_report(conn, out_dir, "+15551111111")
        
        report_path = out_dir / "missing_attachments_report.json"
        assert report_path.exists()
        
        with open(report_path) as f:
            report_data = json.load(f)
        
        # Should only include attachments for the specified contact
        assert report_data["contact"] == "+15551111111"
        # Should have at least one missing attachment (since files don't exist)
        assert report_data["summary"]["total_missing"] >= 1
        
        # All items should be for the specified contact's conversation
        for item in report_data["items"]:
            assert item["conv_guid"] == "iMessage;-;+15551111111"
        
        conn.close()
    
    def test_exit_code_remains_zero_with_missing_attachments(self, test_db, tmp_path):
        """Test that missing attachments don't cause non-zero exit codes."""
        # This is tested implicitly - if missing attachments caused exceptions,
        # other tests would fail. The generate_missing_attachments_report function
        # should handle missing files gracefully and not raise exceptions.
        
        from chatx.imessage.report import generate_missing_attachments_report
        from chatx.imessage.db import copy_db_for_readonly, open_ro
        
        out_dir = tmp_path / "output"
        
        # This should complete without exceptions even with missing files
        with copy_db_for_readonly(test_db) as temp_db:
            conn = open_ro(temp_db)
            try:
                missing_counts = generate_missing_attachments_report(conn, out_dir, "+15551234567")
                
                # Function should return successfully
                assert isinstance(missing_counts, dict)
                
                # Report should be generated
                report_path = out_dir / "missing_attachments_report.json"
                assert report_path.exists()
                
            finally:
                conn.close()