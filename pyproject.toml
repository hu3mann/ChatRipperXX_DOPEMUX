[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chatx"
version = "0.1.0"
description = "Privacy-focused, local-first CLI tool for forensic chat analysis"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
authors = [
    {name = "Dopemux-ChatRipperXX Contributors"}
]
keywords = ["chat", "forensic", "privacy", "local-first", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: System :: Archiving",
    "Topic :: Security",
    "Typing :: Typed",
]

dependencies = [
    "pydantic>=2.5.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "sqlalchemy>=2.0.0",
    "python-dateutil>=2.8.0",
    "pathvalidate>=3.0.0",
    "jsonschema>=4.0.0",
    "pillow>=11.0.0",
    "pillow-heif>=1.1.0",
]

[project.optional-dependencies]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "chromadb>=0.4.0",
]
local-llm = [
    "ollama>=0.1.0",
]
wave3 = [
    "chromadb>=0.4.15",
    "ollama>=0.3.0", 
    "sentence-transformers>=2.2.2",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.7.0",
    "ruff>=0.1.6",
    "pre-commit>=3.5.0",
    "mkdocs-material>=9.0.0",
    "types-jsonschema>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/hue/Dopemux-ChatRipperXX"
Documentation = "https://hue.github.io/Dopemux-ChatRipperXX"
Repository = "https://github.com/hue/Dopemux-ChatRipperXX.git"
Issues = "https://github.com/hue/Dopemux-ChatRipperXX/issues"

[project.scripts]
chatx = "chatx.cli.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/chatx"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/schemas",
    "/docs",
    "/tests",
    "pyproject.toml",
]

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "PLR2004"]

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "perf: performance smoke tests (opt-in)",
]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=src/chatx",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=60",
]

[tool.coverage.run]
source = ["src/chatx"]
omit = [
  "tests/*",
  "src/chatx/__main__.py",
  "src/chatx/redaction/*",
  "src/chatx/transformers/*",
  "src/chatx/enrichment/*",
  "src/chatx/transcribe/local_whisper.py",
  "src/chatx/schemas/validator.py",
  "src/chatx/indexing/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
