"""Pydantic schemas for LLM enrichment data."""

from typing import Literal

from pydantic import BaseModel, Field


class Certainty(BaseModel):
    """Certainty score model."""
    val: float = Field(..., ge=0.0, le=1.0, description="Certainty score (0-1)")


class Directness(BaseModel):
    """Directness score model."""
    val: float = Field(..., ge=0.0, le=1.0, description="Directness score (0-1)")


class Provenance(BaseModel):
    """Enrichment provenance tracking."""
    schema_v: str = Field(..., description="Schema version")
    run_id: str = Field(..., description="Enrichment run identifier")
    model_id: str = Field(..., description="LLM model identifier")
    prompt_hash: str = Field(..., description="Hash of the prompt used")


class EnrichmentMessage(BaseModel):
    """LLM enrichment data for a single message.
    
    This model captures the semantic and pragmatic analysis
    generated by LLM processing of individual messages.
    """
    
    msg_id: str = Field(..., description="Reference to the canonical message")
    speech_act: str = Field(..., description="Speech act classification")
    intent: str = Field(..., description="Inferred intent of the message")
    stance: Literal["supportive", "neutral", "challenging"] = Field(
        ..., description="Speaker's stance"
    )
    tone: str = Field(..., description="Emotional tone of the message")
    emotion_primary: Literal[
        "joy", "anger", "fear", "sadness", "disgust", "surprise", "neutral"
    ] = Field(..., description="Primary emotion detected")
    certainty: Certainty = Field(..., description="Certainty assessment")
    directness: Directness = Field(..., description="Directness assessment")
    boundary_signal: Literal[
        "none", "set", "test", "violate", "reinforce"
    ] = Field(..., description="Boundary signaling behavior")
    repair_attempt: bool = Field(..., description="Whether message attempts repair")
    inferred_meaning: str = Field(
        ..., max_length=200, description="Inferred semantic meaning"
    )
    map_refs: list[str] = Field(default_factory=list, description="Reference mappings")
    coarse_labels: list[str] = Field(default_factory=list, description="Coarse-grained labels")
    fine_labels_local: list[str] = Field(
        default_factory=list,
        description="LOCAL-ONLY fine labels; MUST NOT be sent to cloud"
    )
    influence_class: str | None = Field(
        None, description="Cloud-safe influence classification"
    )
    influence_score: float | None = Field(
        None, ge=0.0, le=1.0, description="Influence score (0-1)"
    )
    relationship_structure: list[str] = Field(
        default_factory=list, description="Relationship structure indicators"
    )
    relationship_dynamic: list[str] = Field(
        default_factory=list, description="Relationship dynamic indicators"
    )
    notes: str | None = Field(None, description="Additional analysis notes")
    confidence_llm: float = Field(
        ..., ge=0.0, le=1.0, description="LLM confidence score (0-1)"
    )
    source: Literal["local", "cloud"] = Field(..., description="Enrichment source")
    provenance: Provenance = Field(..., description="Enrichment provenance")
    shield: dict[str, object] = Field(
        default_factory=dict,
        description="Optional record of preflight/coverage context"
    )
